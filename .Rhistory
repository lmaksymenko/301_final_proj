optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'linear', batch_input_shape = c(10, 10, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'linear', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'linear', stateful = T) %>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'linear', batch_input_shape = c(10, 10, 11), return_sequences = T, stateful = T)
#for(i in 1:10){
# model %>% layer_lstm(units = 5, activation = 'linear', return_sequences = T, stateful = T)
#}
model %>% layer_lstm(units = 5, activation = 'linear', stateful = T) %>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
m
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'linear', batch_input_shape = c(10, 10, 11), return_sequences = T, stateful = T)
model %>% layer_lstm(units = 5, activation = 'linear', stateful = T) %>%
model %>%layer_dense(1, activation = 'linear')
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'linear', batch_input_shape = c(1, 10, 11), return_sequences = T, stateful = T)
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'linear', batch_input_shape = c(1, 10, 11), return_sequences = T, stateful = T)
#for(i in 1:10){
# model %>% layer_lstm(units = 5, activation = 'linear', return_sequences = T, stateful = T)
#}
model %>% layer_lstm(units = 5, activation = 'linear', stateful = T) %>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 1, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 1, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'linear', batch_input_shape = c(1, 1, 11), return_sequences = T, stateful = T)
#for(i in 1:10){
# model %>% layer_lstm(units = 5, activation = 'linear', return_sequences = T, stateful = T)
#}
model %>% layer_lstm(units = 5, activation = 'linear', stateful = T) %>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'linear', batch_input_shape = c(111, 1, 11), return_sequences = T, stateful = T)
model %>% layer_lstm(units = 5, activation = 'linear', stateful = T) %>%
model %>%layer_dense(1, activation = 'linear')
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'linear', batch_input_shape = c(1, 1, 11), return_sequences = T, stateful = T)
summary(model)
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 1, 11), return_sequences = T, stateful = T)
model %>% layer_lstm(units = 5, activation = 'tanh') %>%
model %>%layer_dense(1, activation = 'linear')
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 1, 11), return_sequences = T, stateful = T)
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
summary(model)
model %>%layer_dense(1, activation = 'linear')
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
result <- predict(model, x_test_vec)
result
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 10, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 10, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 10, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 10, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 10, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(20, 10, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 10, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(111, 10, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 1, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 1, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 10, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 1, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 1, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 1, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
result <- predict(model, x_test_vec)
result
plot(-data_test$spy_var_test, type = "l", main = "LSTM Multivariate VaR Predicted vs Empirical",
ylab = "VaR")
lines(-result, lty = 2, col = "blue")
legend(80, y = 0.07, c("Actual", "Predicted"), lty = c(1,2), col = c("black", "blue"))
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 111, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 111, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 111, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 2, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 2, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 2, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 2, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 2, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(2, 2, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(20, 2, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 10, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 10, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(20, 2, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
result <- predict(model, x_test_vec)
result
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 10, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 10, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 10, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
result <- predict(model, x_test_vec)
result
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 10, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 10, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(10, 11, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
result <- predict(model, x_test_vec)
result
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 10, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 10, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(10, 11, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 10, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 10, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(10, 1, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
result <- predict(model, x_test_vec)
x_train_vec = array(data = x_train, dim = c(nrow(x_train), 10, 11))
x_test_vec = array(data = x_test, dim = c(nrow(x_test), 10, 11))
#Build Model
model <- keras_model_sequential()
model %>%
layer_lstm(units = 5, activation = 'tanh', batch_input_shape = c(1, 10, 11), return_sequences = T, stateful = T)
for(i in 1:10){
model %>% layer_lstm(units = 5, activation = 'tanh', return_sequences = T, stateful = T)
}
model %>% layer_lstm(units = 5, activation = 'tanh') #%>%
model %>%layer_dense(1, activation = 'linear')
model %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = "accuracy"
)
summary(model)
model %>% fit(
x = x_train_vec,
y = y_train,
batch_size = BATCH_SIZE,
epochs = 1
)
result <- predict(model, x_test_vec)
result
